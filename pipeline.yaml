---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  Authors:
    Description:  Scott Schmidt (scott@1strategy.com)
  Purpose:
    Description: >
      Starter template which provisions an extensible CI/CD pipeline for Serverless applications built with AWS Serverless Application Model.

      Note: This template requires parameter be stored in Systems Manager Parameter Store
  License:
    Description: >
      Copyright 2019 1Strategy
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
            http://www.apache.org/licenses/LICENSE-2.0
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

Parameters:
  PipelineEventsNotificationEmail:
    Description: Email address for Pipeline events subscription; requires verification
    Type: AWS::SSM::Parameter::Value<String>
    Default: /serverless-pipeline/sns/notifications/primary-email

  GithubRepo:
    Description: Gitub Repository name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /serverless-pipeline/codepipeline/github/repo

  GithubUser:
    Description: Github user or oganization which owns the source code repository
    Type: AWS::SSM::Parameter::Value<String>
    Default: /serverless-pipeline/codepipeline/github/user

  GithubToken:
    Description: >
      Github OAuth Token with full permissions on admin:repo_hook and repo
    Type: AWS::SSM::Parameter::Value<String>
    NoEcho: true
    Default: /serverless-pipeline/codepipeline/github/token

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodebuildProjectLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/serverless-pipeline'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/serverless-pipeline:*'
        - PolicyName: CodebuildArtifactsBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${BuildArtifactsBucket}/*'
        - PolicyName: CodebuildParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: 'ssm:GetParameters'
                Resource: '*'

  CloudFormationAdministratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Action:
                - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'iam:PassRole'
                    - 'lambda:InvokeFunction'
                    - 'lambda:ListFunctions'
                    - 'lambda:InvokeAsyc'
                Resource: '*'
        - PolicyName: CodePipelineArtifactsS3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: 's3:*'
                Resource: !Sub 'arn:aws:s3:::${BuildArtifactsBucket}/*'
        - PolicyName: CodePipelineBuildProjectAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProject}'
        - PolicyName: CodePipelineCloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:GetStackPolicy'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/serverless-pipeline*/*'
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'

  BuildArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Retain

  PipelineEventsNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}-events

  PipelineEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref PipelineEventsNotificationEmail
      Protocol: email
      TopicArn: !Ref PipelineEventsNotification

  PipelineNotificationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: String
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Action Execution State Change
        detail:
            pipeline:
              - !Ref Pipeline
            state:
                - STARTED
                - SUCCEEDED
                - FAILED
      Name: !Sub ${AWS::StackName}-pipeline-notification-rule
      State: ENABLED
      Targets:
        -
          Arn: !Ref PipelineEventsNotification
          Id: !Sub ${AWS::StackName}-sns

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: serverless-pipeline
      Description: Build project for the serverless-pipeline
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_SMALL
          Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
          EnvironmentVariables:
            -
              Name: BUILD_ARTIFACT_BUCKET
              Value: !Ref BuildArtifactsBucket
      Cache:
        Type: S3
        Location: !Sub ${BuildArtifactsBucket}/codebuild-cache
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
              commands:
                - echo "--------INSTALL PHASE--------"
                - pip3 install --user aws-sam-cli
            pre_build:
              commands:
                - echo "--------PREBUILD PHASE--------"
                # Example shows installation of NPM dependencies for shared deps (layers) in a SAM App
                # - cd functions/dependencies/shared_deps_one/nodejs
                # - npm install
                # - cd functions/dependencies/shared_deps_two/nodejs
                # - npm install
                # - cd ../../../../
            build:
              commands:
                - echo "--------BUILD PHASE--------"
                - echo "Starting SAM packaging `date` in `pwd`"
                - sam package --template-file template.yaml --s3-bucket $BUILD_ARTIFACT_BUCKET --output-template-file packaged.yaml
            post_build:
              commands:
                - echo "--------POST-BUILD PHASE--------"
                - echo "SAM packaging completed on `date`"
          artifacts:
            files:
              - packaged.yaml
            discard-paths: yes
          cache:
            paths:
            - '/root/.cache/pip'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
          Location: !Ref BuildArtifactsBucket
          Type: S3
      Name: serverless-pipeline
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Ref GithubRepo
                Branch: master
                OAuthToken: !Ref GithubToken
              OutputArtifacts:
                - Name: SourceCodeArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCodeArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Staging
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationAdministratorRole.Arn
                StackName: serverless-pipeline-Staging
                ChangeSetName: serverless-pipeline-ChangeSet-Staging
                TemplatePath: BuildArtifact::packaged.yaml
                Capabilities: CAPABILITY_IAM
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationAdministratorRole.Arn
                StackName: serverless-pipeline-Staging
                ChangeSetName: serverless-pipeline-ChangeSet-Staging
              OutputArtifacts:
                - Name: serverless-pipelineStagingChangeSet
              RunOrder: 2
        - Name: Production
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationAdministratorRole.Arn
                StackName: serverless-pipeline-Prod
                ChangeSetName: serverless-pipeline-ChangeSet-Prod
                TemplatePath: BuildArtifact::packaged.yaml
                Capabilities: CAPABILITY_IAM
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
            - Name: DeploymentApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationAdministratorRole.Arn
                StackName: serverless-pipeline-Prod
                ChangeSetName: serverless-pipeline-ChangeSet-Prod
              OutputArtifacts:
                - Name: serverless-pipelineProdChangeSet
              RunOrder: 3

Outputs:
  BuildArtifactsBucket:
    Description: Amazon S3 Bucket for Pipeline and Build artifacts
    Value: !Ref BuildArtifactsBucket

  CodeBuildProject:
    Description: CodeBuild Project name
    Value: !Ref CodeBuildProject

  CodePipeline:
    Description: AWS CodePipeline pipeline name
    Value: !Ref Pipeline
...
